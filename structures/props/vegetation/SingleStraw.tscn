[gd_scene load_steps=11 format=2]

[ext_resource path="res://assets/shaders/Straw_Sway.shader" type="Shader" id=1]
[ext_resource path="res://assets/props/grass/grass_test.png" type="Texture" id=2]
[ext_resource path="res://structures/props/vegetation/SingleStraw.gd" type="Script" id=3]
[ext_resource path="res://assets/music/props/trees/Bush_2.wav" type="AudioStream" id=4]
[ext_resource path="res://assets/music/props/trees/Bush_1.wav" type="AudioStream" id=5]
[ext_resource path="res://effects/Shadow.tscn" type="PackedScene" id=6]

[sub_resource type="CircleShape2D" id=1]
radius = 8.0

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = ExtResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.06
shader_param/maxStrength = 0.1
shader_param/strengthScale = 10.0
shader_param/interval = 0.8
shader_param/detail = 1.0
shader_param/distortion = 0.524
shader_param/heightOffset = 0.281
shader_param/offset = 2.0

[sub_resource type="Shader" id=63]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;
render_mode unshaded;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code
uniform vec2 rect_size;
uniform float tang : hint_range(0,1) = 0.0;

varying flat vec2 o;
varying vec3 p;

const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;
	
	VERTEX += UV * rect_size * tang * (1.0 - inset);
	//VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o; 
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id=62]
resource_local_to_scene = true
shader = SubResource( 63 )
shader_param/fov = 1.0
shader_param/cull_back = true
shader_param/y_rot = -4.831
shader_param/x_rot = -28.289
shader_param/inset = 0.0
shader_param/rect_size = Vector2( 20, 20 )
shader_param/tang = 0.06

[node name="Straw" type="Node2D"]
script = ExtResource( 3 )

[node name="Bush1" type="AudioStreamPlayer2D" parent="."]
position = Vector2( 1, -4 )
stream = ExtResource( 5 )
max_distance = 200.0
attenuation = 0.870551

[node name="Bush2" type="AudioStreamPlayer2D" parent="."]
position = Vector2( 0, -4 )
stream = ExtResource( 4 )
max_distance = 200.0
attenuation = 0.707107

[node name="SoftCollisions" type="Area2D" parent="."]
position = Vector2( 0, -7 )
collision_layer = 0
collision_mask = 32
monitorable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="SoftCollisions"]
position = Vector2( 0, 1 )
shape = SubResource( 1 )

[node name="Straw" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 0, -6 )
texture = ExtResource( 2 )
centered = false
offset = Vector2( -8, -9 )
hframes = 8
vframes = 4

[node name="Shadow" parent="." instance=ExtResource( 6 )]
material = SubResource( 62 )
position = Vector2( 0, -3 )
z_index = -1
texture = ExtResource( 2 )
offset = Vector2( -7.39838, -16.7612 )
hframes = 8
vframes = 4
dawn = Vector3( 0, 0, 1 )
day = Vector3( 0, -30, 1 )
dusk = Vector3( 0, -30, 0.5 )
night = Vector3( -40, 60, 0 )

[connection signal="finished" from="Bush1" to="." method="_on_Bush1_finished"]
[connection signal="finished" from="Bush2" to="." method="_on_Bush2_finished"]
[connection signal="body_entered" from="SoftCollisions" to="." method="_on_SoftCollisions_body_entered"]
