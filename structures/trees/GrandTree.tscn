[gd_scene load_steps=29 format=2]

[ext_resource path="res://assets/props/trees/large_autumn_tree_timber.png" type="Texture" id=1]
[ext_resource path="res://assets/props/trees/large_autumn_tree_eyes.png" type="Texture" id=2]
[ext_resource path="res://effects/Shadow.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/props/trees/large_autumn_tree_shadows.png" type="Texture" id=4]
[ext_resource path="res://structures/trees/GrandTree.gd" type="Script" id=5]
[ext_resource path="res://overlap/PlayerEnterActionArea.tscn" type="PackedScene" id=6]
[ext_resource path="res://effects/ChangeOpacityArea.tscn" type="PackedScene" id=7]
[ext_resource path="res://assets/props/trees/large_autumn_tree_leaves_pad.png" type="Texture" id=8]
[ext_resource path="res://assets/shaders/ground_tiles/ground_rand_variations.tres" type="Material" id=9]
[ext_resource path="res://assets/props/trees/large_autumn_tree_leaves.png" type="Texture" id=10]
[ext_resource path="res://GodRay.tscn" type="PackedScene" id=11]

[sub_resource type="Shader" id=1]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 2; 

float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}


void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + random(UV) * 500.0;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id=69]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.135
shader_param/maxStrength = 0.099
shader_param/strengthScale = 100.0
shader_param/interval = 40.0
shader_param/detail = 1.0
shader_param/distortion = 0.0
shader_param/heightOffset = 0.6
shader_param/offset = 10.0

[sub_resource type="Shader" id=61]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;
render_mode unshaded;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code
uniform vec2 rect_size;
uniform float tang : hint_range(0,1) = 0.0;

varying flat vec2 o;
varying vec3 p;

const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;
	
	VERTEX += UV * rect_size * tang * (1.0 - inset);
	//VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o; 
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id=62]
resource_local_to_scene = true
shader = SubResource( 61 )
shader_param/fov = 10.889
shader_param/cull_back = true
shader_param/y_rot = -13.583
shader_param/x_rot = -2.286
shader_param/inset = 1.0
shader_param/rect_size = Vector2( 50, 50 )
shader_param/tang = 0.458

[sub_resource type="CapsuleShape2D" id=63]
height = 92.0

[sub_resource type="CircleShape2D" id=67]
radius = 78.0897

[sub_resource type="Animation" id=64]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("LargeAutumnTreeEyes:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 2 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("LargeAutumnTreeEyes:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 5, -40 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("LargeAutumnTreeEyes:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ) ]
}

[sub_resource type="Animation" id=66]
resource_name = "sleep"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("LargeAutumnTreeEyes:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("LargeAutumnTreeEyes:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.1, 0.3, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 5, -30 ), Vector2( 5, -35 ), Vector2( 5, -29 ), Vector2( 5, -30 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("LargeAutumnTreeEyes:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.1, 1 ), Vector2( 1, 1 ) ]
}

[sub_resource type="Animation" id=65]
resource_name = "wake_up"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("LargeAutumnTreeEyes:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 2, 1, 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("LargeAutumnTreeEyes:position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 5, -30 ), Vector2( 5, -35 ), Vector2( 5, -29 ), Vector2( 5, -30 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("LargeAutumnTreeEyes:scale")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.3, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1.1, 1 ), Vector2( 1, 1 ) ]
}

[sub_resource type="CapsuleShape2D" id=68]
radius = 94.0
height = 30.0

[sub_resource type="Gradient" id=70]
colors = PoolColorArray( 0.89502, 0.52266, 0.227251, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=71]
gradient = SubResource( 70 )

[sub_resource type="ParticlesMaterial" id=72]
emission_shape = 2
emission_box_extents = Vector3( 80, 2, 1 )
flag_disable_z = true
direction = Vector3( 2, 0.5, 0 )
spread = 33.0
gravity = Vector3( 5, 20, 0 )
initial_velocity = 5.0
initial_velocity_random = 0.14
angular_velocity = 64.0
orbit_velocity = 0.0
orbit_velocity_random = 0.0
radial_accel = -5.0
color = Color( 0.839216, 0.662745, 0.0627451, 1 )
color_initial_ramp = SubResource( 71 )

[sub_resource type="Shader" id=73]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;
uniform sampler2D gradient : hint_black;
uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}


vec4 soft_light(vec4 base, vec4 blend){
	vec4 limit = step(0.5, blend);
	return mix(2.0 * base * blend + base * base * (1.0 - 2.0 * blend), sqrt(base) * (2.0 * blend - 1.0) + (2.0 * base) * (1.0 - blend), limit);
}

void fragment()
{
	float gradient_alpha = texture(gradient, vec2(UV.y, UV.x)).r;
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0 , falloff, (1.0 - UV.y)); // Top
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a * gradient_alpha);
}
"

[sub_resource type="Gradient" id=74]
offsets = PoolRealArray( 0, 0.273292 )

[sub_resource type="GradientTexture" id=75]
gradient = SubResource( 74 )

[sub_resource type="ShaderMaterial" id=76]
resource_local_to_scene = true
shader = SubResource( 73 )
shader_param/angle = 0.0
shader_param/position = 0.1
shader_param/spread = 0.471
shader_param/cutoff = -0.116
shader_param/falloff = 0.916
shader_param/edge_fade = 0.208
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.408
shader_param/color = Color( 1, 0.901961, 0.65098, 1 )
shader_param/hdr = true
shader_param/seed = 5.0
shader_param/gradient = SubResource( 75 )

[node name="GrandTree" type="StaticBody2D"]
script = ExtResource( 5 )

[node name="LargeAutumnTreeTimber" type="Sprite" parent="."]
position = Vector2( -2, -34.5 )
texture = ExtResource( 1 )

[node name="LargeAutumnTree" type="Sprite" parent="."]
material = SubResource( 69 )
position = Vector2( -21, -13.5 )
texture = ExtResource( 10 )
offset = Vector2( 8, -116 )

[node name="LargeAutumnTreeEyes" type="Sprite" parent="."]
position = Vector2( 5, -40 )
texture = ExtResource( 2 )
flip_h = true
vframes = 3
frame = 2

[node name="LargeAutumnTreeLeavesPad2" type="Sprite" parent="."]
self_modulate = Color( 0.772549, 0.772549, 0.772549, 1 )
material = ExtResource( 9 )
position = Vector2( 0, 14 )
scale = Vector2( -1.036, 0.992 )
z_index = -1
texture = ExtResource( 8 )

[node name="LargeAutumnTreeLeavesPad" type="Sprite" parent="."]
material = ExtResource( 9 )
position = Vector2( -6, 10 )
z_index = -1
texture = ExtResource( 8 )

[node name="Shadow" parent="." instance=ExtResource( 3 )]
material = SubResource( 62 )
position = Vector2( -51, 2.38419e-07 )
rotation = 3.01593
z_index = -1
texture = ExtResource( 4 )
offset = Vector2( -139.638, -234.604 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( -7, 0 )
rotation = 1.5708
shape = SubResource( 63 )

[node name="PlayerEnterActionArea" parent="." instance=ExtResource( 6 )]
is_single_trigger = false

[node name="CollisionShape2D" parent="PlayerEnterActionArea/PlayerHintArea" index="0"]
visible = false
shape = SubResource( 67 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "sleep"
anims/RESET = SubResource( 64 )
anims/sleep = SubResource( 66 )
anims/wake_up = SubResource( 65 )

[node name="ChangeOpacityArea" parent="." instance=ExtResource( 7 )]

[node name="CollisionShape2D" parent="ChangeOpacityArea" index="0"]
visible = false
position = Vector2( 0, -131 )
shape = SubResource( 68 )

[node name="Leaves" type="Particles2D" parent="."]
position = Vector2( -9, -91 )
amount = 16
lifetime = 3.7
speed_scale = 0.5
process_material = SubResource( 72 )

[node name="GodRay" parent="." instance=ExtResource( 11 )]
material = SubResource( 76 )
position = Vector2( 9, -31 )
scale = Vector2( 68.5, 43.5 )

[connection signal="body_entered" from="PlayerEnterActionArea/PlayerHintArea" to="." method="_on_PlayerHintArea_body_entered"]
[connection signal="body_exited" from="PlayerEnterActionArea/PlayerHintArea" to="." method="_on_PlayerHintArea_body_exited"]

[editable path="PlayerEnterActionArea"]
[editable path="ChangeOpacityArea"]
