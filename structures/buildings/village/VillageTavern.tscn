[gd_scene load_steps=28 format=2]

[ext_resource path="res://assets/buildings/village/houses/houses.png" type="Texture" id=1]
[ext_resource path="res://assets/buildings/village/houses/props/beer_sign.png" type="Texture" id=2]
[ext_resource path="res://effects/ChangeOpacityArea.tscn" type="PackedScene" id=3]
[ext_resource path="res://assets/buildings/village/houses/exterior/doors_1.png" type="Texture" id=4]
[ext_resource path="res://structures/buildings/village/exterior/Stairs.tscn" type="PackedScene" id=5]
[ext_resource path="res://assets/particles/glowing_choice_emitter.tres" type="Material" id=6]
[ext_resource path="res://structures/buildings/village/VillageTavern.gd" type="Script" id=7]
[ext_resource path="res://overlap/PlayerEnterActionArea.tscn" type="PackedScene" id=8]
[ext_resource path="res://structures/buildings/village/exterior/WallLight.tscn" type="PackedScene" id=9]
[ext_resource path="res://GodRay.tscn" type="PackedScene" id=10]
[ext_resource path="res://structures/props/light/AnimatedLight.tscn" type="PackedScene" id=11]
[ext_resource path="res://structures/buildings/village/exterior/Chimney.tscn" type="PackedScene" id=12]
[ext_resource path="res://assets/music/props/tavern/Tavern_door_open.wav" type="AudioStream" id=13]
[ext_resource path="res://effects/HideOffScreen.tscn" type="PackedScene" id=14]
[ext_resource path="res://effects/Shadow.tscn" type="PackedScene" id=15]

[sub_resource type="OccluderPolygon2D" id=60]
closed = false
polygon = PoolVector2Array( 123, 50, 123, -42, 126, -42, 126, -47, 87, -86, 53, -102, -44, -151, -83, -131, -117, -96, -117, 2 )

[sub_resource type="Shader" id=55]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;
uniform sampler2D gradient : hint_black;
uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}


vec4 soft_light(vec4 base, vec4 blend){
	vec4 limit = step(0.5, blend);
	return mix(2.0 * base * blend + base * base * (1.0 - 2.0 * blend), sqrt(base) * (2.0 * blend - 1.0) + (2.0 * base) * (1.0 - blend), limit);
}

void fragment()
{
	float gradient_alpha = texture(gradient, vec2(UV.y, UV.x)).r;
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0 , falloff, (1.0 - UV.y)); // Top
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a * gradient_alpha);
}
"

[sub_resource type="Gradient" id=54]
offsets = PoolRealArray( 0, 0.273292 )

[sub_resource type="GradientTexture" id=4]
gradient = SubResource( 54 )

[sub_resource type="ShaderMaterial" id=56]
resource_local_to_scene = true
shader = SubResource( 55 )
shader_param/angle = 0.0
shader_param/position = 0.1
shader_param/spread = 0.471
shader_param/cutoff = -0.116
shader_param/falloff = 0.916
shader_param/edge_fade = 0.208
shader_param/speed = 1.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.408
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = true
shader_param/seed = 5.0
shader_param/gradient = SubResource( 4 )

[sub_resource type="Animation" id=1]
resource_name = "CloseDoor"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("Door:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -1, -1 ), Vector2( 1, -1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Particles2D:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.2 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("AnimatedLight:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("LightSmallScarce:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=2]
resource_name = "OpenDoor"
length = 1.8
tracks/0/type = "value"
tracks/0/path = NodePath("Door:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 1, -1 ), Vector2( -1, -1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Particles2D:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.2 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("AnimatedLight:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0.1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("LightSmallScarce:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0.1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/4/type = "audio"
tracks/4/path = NodePath("AudioStreamPlayer")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"clips": [ {
"end_offset": 0.0,
"start_offset": 0.0,
"stream": ExtResource( 13 )
} ],
"times": PoolRealArray( 0 )
}

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Door:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 1, -1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("Particles2D:emitting")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("AnimatedLight:visible")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("LightSmallScarce:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="CapsuleShape2D" id=58]
radius = 11.0175
height = 30.8926

[sub_resource type="CapsuleShape2D" id=64]
radius = 64.8471
height = 142.21

[sub_resource type="Shader" id=63]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;
render_mode unshaded;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code
uniform vec2 rect_size;
uniform float tang : hint_range(0,1) = 0.0;

varying flat vec2 o;
varying vec3 p;

const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;
	
	VERTEX += UV * rect_size * tang * (1.0 - inset);
	//VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o; 
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id=62]
resource_local_to_scene = true
shader = SubResource( 63 )
shader_param/fov = 1.0
shader_param/cull_back = true
shader_param/y_rot = 4.199
shader_param/x_rot = -11.673
shader_param/inset = 1.0
shader_param/rect_size = Vector2( 50, 50 )
shader_param/tang = 0.047

[node name="VillageTavern" type="Node2D"]
z_as_relative = false
script = ExtResource( 7 )

[node name="Chimney" parent="." instance=ExtResource( 12 )]
position = Vector2( 37, -104 )

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
occluder = SubResource( 60 )

[node name="Tavern" type="Sprite" parent="."]
position = Vector2( -18, 35 )
texture = ExtResource( 1 )
centered = false
offset = Vector2( -111, -188 )
vframes = 4

[node name="Entrance" type="Sprite" parent="."]
position = Vector2( 98.7801, 23 )
rotation = -3.14159
scale = Vector2( 1, -1 )
texture = ExtResource( 4 )
centered = false
offset = Vector2( -5.2198, -32 )
vframes = 4
frame = 1

[node name="Stairs" parent="." instance=ExtResource( 5 )]
position = Vector2( 104, 64.0001 )
rotation = -3.14159
scale = Vector2( 1, -1 )

[node name="Door" type="Sprite" parent="."]
position = Vector2( 97.3033, 25.0001 )
rotation = -3.14159
scale = Vector2( 1, -1 )
texture = ExtResource( 4 )
offset = Vector2( 8.30318, 0 )
vframes = 4
frame = 3

[node name="WallLight" parent="." instance=ExtResource( 9 )]
position = Vector2( 50, 17 )

[node name="WallLight3" parent="." instance=ExtResource( 9 )]
position = Vector2( -120, -56 )

[node name="AnimatedLight" parent="." instance=ExtResource( 11 )]
visible = false
position = Vector2( 73.1088, 31.7697 )
rotation = -3.14159
scale = Vector2( 1.5, -1.5 )
offset = Vector2( 0.739174, -11.8465 )
energy = 1.01

[node name="Particles2D" type="Particles2D" parent="."]
position = Vector2( 87, 43 )
emitting = false
process_material = ExtResource( 6 )

[node name="LightSmallScarce" parent="." instance=ExtResource( 10 )]
visible = false
material = SubResource( 56 )
position = Vector2( 128, 35 )
rotation = -1.28282
scale = Vector2( 26.9479, 43.5 )

[node name="LightSmallScarce2" parent="." instance=ExtResource( 10 )]
modulate = Color( 1, 1, 1, 0.741176 )
material = SubResource( 56 )
position = Vector2( -97, -30 )
rotation = 1.69122
scale = Vector2( 20.7439, 28.263 )
use_day_cycle = true

[node name="LightSmallScarce3" parent="." instance=ExtResource( 10 )]
modulate = Color( 1, 1, 1, 0.741176 )
material = SubResource( 56 )
position = Vector2( -37, 7 )
rotation = 1.48877
scale = Vector2( 28.2957, 43.5 )
use_day_cycle = true

[node name="BeerSign" type="Sprite" parent="."]
position = Vector2( 101, -7 )
rotation = -3.14159
scale = Vector2( 1, -1 )
texture = ExtResource( 2 )
offset = Vector2( 1.04956, -0.746643 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/CloseDoor = SubResource( 1 )
anims/OpenDoor = SubResource( 2 )
anims/RESET = SubResource( 3 )

[node name="PlayerEnterActionArea" parent="." instance=ExtResource( 8 )]
position = Vector2( 94, 43 )
is_scene_trigger = true
is_single_trigger = false
scene_triggers = [ "1.1" ]

[node name="CollisionShape2D" parent="PlayerEnterActionArea/PlayerHintArea" index="0"]
visible = false
position = Vector2( 11, 19 )
rotation = -0.811578
shape = SubResource( 58 )

[node name="ButtonPressHint" parent="PlayerEnterActionArea" index="1"]
margin_left = -19.0
margin_top = -26.0
margin_right = -19.0
margin_bottom = -26.0

[node name="StaticBody2D" type="StaticBody2D" parent="."]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="StaticBody2D"]
visible = false
polygon = PoolVector2Array( -118, -11, 45, 64, 54, 64, 78, 54, 78, 73, 57, 83, 44, 83, -118, 1 )

[node name="CollisionPolygon2D2" type="CollisionPolygon2D" parent="StaticBody2D"]
visible = false
polygon = PoolVector2Array( 99, 44, 111, 56, 124, 50, 124, 33 )

[node name="CollisionPolygon2D4" type="CollisionPolygon2D" parent="StaticBody2D"]
visible = false
position = Vector2( -25, -7 )
polygon = PoolVector2Array( 95, 55, 102, 61, 124, 50, 125, 46 )

[node name="CollisionPolygon2D3" type="CollisionPolygon2D" parent="StaticBody2D"]
visible = false
polygon = PoolVector2Array( -118, -11, -30, -37, 124, 33, 110, 39, -30, -23, -118, 1 )

[node name="ChangeOpacityArea" parent="." instance=ExtResource( 3 )]

[node name="CollisionShape2D" parent="ChangeOpacityArea" index="0"]
visible = false
position = Vector2( 1, -57 )
rotation = -1.09258
shape = SubResource( 64 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 13 )

[node name="HideOffScreen" parent="." instance=ExtResource( 14 )]

[node name="Shadow" parent="." instance=ExtResource( 15 )]
material = SubResource( 62 )
position = Vector2( -77.9325, -2.29336 )
rotation = -2.91121
scale = Vector2( -1.04151, 1.0103 )
z_index = -1
texture = ExtResource( 1 )
offset = Vector2( -43.9719, -164.038 )
vframes = 4

[connection signal="action_pressed" from="PlayerEnterActionArea" to="." method="_on_PlayerEnterActionArea_action_pressed"]
[connection signal="body_entered" from="PlayerEnterActionArea/PlayerHintArea" to="." method="_on_PlayerHintArea_body_entered"]
[connection signal="body_exited" from="PlayerEnterActionArea/PlayerHintArea" to="." method="_on_PlayerHintArea_body_exited"]

[editable path="PlayerEnterActionArea"]
[editable path="ChangeOpacityArea"]
