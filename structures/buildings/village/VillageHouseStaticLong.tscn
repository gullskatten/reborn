[gd_scene load_steps=11 format=2]

[ext_resource path="res://assets/buildings/village/houses/houses.png" type="Texture" id=1]
[ext_resource path="res://structures/buildings/village/exterior/Chimney.tscn" type="PackedScene" id=2]
[ext_resource path="res://effects/ChangeOpacityArea.tscn" type="PackedScene" id=3]
[ext_resource path="res://structures/buildings/village/exterior/WallLight.tscn" type="PackedScene" id=4]
[ext_resource path="res://structures/buildings/village/VillageHouseStaticLong.gd" type="Script" id=5]
[ext_resource path="res://effects/HideOffScreen.tscn" type="PackedScene" id=6]
[ext_resource path="res://effects/Shadow.tscn" type="PackedScene" id=7]

[sub_resource type="OccluderPolygon2D" id=1]
closed = false
polygon = PoolVector2Array( 125, 61, 125, -29, 127, -29, 127, -35, 89, -72, -42, -137, -80, -118, -114, -80, -114, 13 )

[sub_resource type="Shader" id=61]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;
render_mode unshaded;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code
uniform vec2 rect_size;
uniform float tang : hint_range(0,1) = 0.0;

varying flat vec2 o;
varying vec3 p;

const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;
	
	VERTEX += UV * rect_size * tang * (1.0 - inset);
	//VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o; 
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id=62]
resource_local_to_scene = true
shader = SubResource( 61 )
shader_param/fov = 1.0
shader_param/cull_back = true
shader_param/y_rot = 4.199
shader_param/x_rot = -11.673
shader_param/inset = 1.0
shader_param/rect_size = Vector2( 50, 50 )
shader_param/tang = 0.047

[node name="House2" type="Node2D"]
light_mask = 2
scale = Vector2( -1, 1 )
script = ExtResource( 5 )

[node name="LightOccluder2D" type="LightOccluder2D" parent="."]
light_mask = 2
occluder = SubResource( 1 )
light_mask = 2

[node name="Tavern" type="Sprite" parent="."]
position = Vector2( 0, -1 )
texture = ExtResource( 1 )
offset = Vector2( 2, -22 )
vframes = 4
frame = 2

[node name="WallLight" parent="." instance=ExtResource( 4 )]
position = Vector2( 52, 32 )

[node name="WallLight3" parent="." instance=ExtResource( 4 )]
position = Vector2( -116, -47 )

[node name="StaticBody2D" type="StaticBody2D" parent="."]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="StaticBody2D"]
visible = false
polygon = PoolVector2Array( -116, -7, 44, 60, 65, 61, 126, 43, 126, 59, 59, 94, 45, 93, -116, 15 )

[node name="CollisionPolygon2D3" type="CollisionPolygon2D" parent="StaticBody2D"]
visible = false
polygon = PoolVector2Array( -116, -5, -31, -33, 127, 36, 126, 53, -29, -19, -116, 6 )

[node name="ChangeOpacityArea" parent="." instance=ExtResource( 3 )]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="ChangeOpacityArea"]
visible = false
polygon = PoolVector2Array( -116, -8, -115, -85, -81, -121, -42, -138, 90, -73, 128, -36, 126, 60, 55, 96, -116, 15 )

[node name="Chimney" parent="." instance=ExtResource( 2 )]
position = Vector2( -17, -60 )

[node name="HideOffScreen" parent="." instance=ExtResource( 6 )]
position = Vector2( -1.99998, -9.99996 )
scale = Vector2( 1.20002, 1.025 )

[node name="Shadow" parent="." instance=ExtResource( 7 )]
material = SubResource( 62 )
position = Vector2( -78.522, 16.5942 )
rotation = -2.91121
scale = Vector2( -1.04151, 0.898329 )
z_index = -1
texture = ExtResource( 1 )
offset = Vector2( -43.9719, -164.038 )
vframes = 4
day = Vector3( 8, -5, 1 )
dusk = Vector3( 8, -5, 0.5 )
night = Vector3( -24, 10, 0 )
