[gd_scene load_steps=26 format=2]

[ext_resource path="res://scenes/cutscenes/common/CutSceneFocusEffect.tscn" type="PackedScene" id=1]
[ext_resource path="res://camera/ScreenTransition.tscn" type="PackedScene" id=2]
[ext_resource path="res://weather/MaxZoomClouds.tscn" type="PackedScene" id=3]
[ext_resource path="res://ui/inventory/Inventory.tscn" type="PackedScene" id=4]
[ext_resource path="res://Interface.gd" type="Script" id=5]
[ext_resource path="res://target/CurrentTargetPortrait.tscn" type="PackedScene" id=6]
[ext_resource path="res://scenes/worlds/World1.tscn" type="PackedScene" id=7]
[ext_resource path="res://WorldEnvDefault.tres" type="Environment" id=8]
[ext_resource path="res://ui/character/CharacterInspect.tscn" type="PackedScene" id=9]
[ext_resource path="res://MainScreen.gd" type="Script" id=10]
[ext_resource path="res://assets/shaders/parchment.jpg" type="Texture" id=11]
[ext_resource path="res://ui/errorhandling/ErrorMessages.tscn" type="PackedScene" id=12]
[ext_resource path="res://weather/WeatherEffects.tscn" type="PackedScene" id=13]
[ext_resource path="res://effects/PostFX.tscn" type="PackedScene" id=14]
[ext_resource path="res://ui/SmallLabel.tscn" type="PackedScene" id=15]
[ext_resource path="res://time/day_night_cycle.tscn" type="PackedScene" id=16]
[ext_resource path="res://music/BackgroundMusic.tscn" type="PackedScene" id=17]

[sub_resource type="Shader" id=18]
code = "shader_type canvas_item;

// MODES
// 0 - DEBUG
// 1 - MULTIPLY
// 2 - SCREEN
// 3 - SOFTLIGHT
// 4 - HARDLIGHT
// 5 - OVERLAY
uniform int mode :hint_range(0,5) = 5;
uniform bool linearColorSpace = false;
uniform vec4 color1 :hint_color = vec4(1, 0.5, 0.8, 1);
uniform vec4 color2 :hint_color = vec4(0.4, 0.8, 1, 1);
uniform vec2 direction = vec2(1.0, 1.0);
uniform float opacity :hint_range(0, 1) = 0.5;

 vec3 srgb_to_linear(vec3 c){
	return c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);
}

vec3 linear_to_srgb(vec3 c){
	return max(1.055 * pow(c, vec3(0.416666667)) - 0.055, 0.0);
}

void fragment(){
	vec2 uv = FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy;
	vec4 src = texture(SCREEN_TEXTURE, uv);
	
	vec3 c_a = src.rgb;
	vec3 grad1 = color1.rgb;
	vec3 grad2 = color2.rgb;
	vec3 c_f;
	
	if (linearColorSpace){ 
		c_a = linear_to_srgb(c_a);
		grad1 = linear_to_srgb(grad1);
		grad2 = linear_to_srgb(grad2);
	}

	float param = dot(uv - 0.5, direction);
	vec3 c_b = mix(grad1, grad2, param + 0.5);
	
	if (mode == 0){       // DEBUG
		c_f = c_b;
	}else if (mode == 1){ // MULTIPLY
		c_f = c_a * c_b;
	}else if (mode == 2){ // SCREEN
		c_f = 1.0 - (1.0 - c_a) * (1.0 - c_b);
	}else if (mode == 3){ // SOFTLIGHT
		vec3 c_u = c_a * c_b * 2.0 + (1.0 - c_b * 2.0) * c_a * c_a;
		vec3 c_d = (1.0 - c_b) * c_a * 2.0 + (c_b * 2.0 - 1.0) * sqrt(c_a);
		c_f = mix(c_u, c_d, c_b + 0.5);
	}else if (mode == 4){ // HARDLIGHT
		vec3 c_u = c_a * c_b * 2.0;
		vec3 c_d = 1.0 - (1.0 - c_a) * (1.0 - c_b) * 2.0;
		c_f = mix(c_u, c_d, c_b + 0.5);
	}else if (mode == 5){ // OVERLAY
		vec3 c_u = c_a * c_b * 2.0;
		vec3 c_d = 1.0 - (1.0 - c_a) * (1.0 - c_b) * 2.0;
		c_f = mix (c_u, c_d, c_a + 0.5);
	}
	
	if (linearColorSpace){
		c_f = srgb_to_linear(c_f);
	}

	COLOR = vec4(c_f, opacity);
    }"

[sub_resource type="ShaderMaterial" id=19]
resource_local_to_scene = true
shader = SubResource( 18 )
shader_param/mode = 3
shader_param/linearColorSpace = false
shader_param/color1 = Color( 0.188235, 0.243137, 0.321569, 1 )
shader_param/color2 = Color( 0.423529, 0.101961, 0.780392, 1 )
shader_param/direction = Vector2( 0.1, 0.7 )
shader_param/opacity = 0.588

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;
uniform int radius = 5;
uniform vec3 offset=vec3(0.0);
void fragment() 
 {
     vec2 src_size = vec2 ( SCREEN_PIXEL_SIZE.x,  SCREEN_PIXEL_SIZE.y);
     vec2 uv = UV.xy;
     float n = float((radius + 1) * (radius + 1));
     vec3 m0 = offset; vec3 m1 = offset; vec3 m2 = offset; vec3 m3 = offset;
     vec3 s0 = offset; vec3 s1 = offset; vec3 s2 = offset; vec3 s3 = offset;
     vec3 c;

     for (int j = -radius; j <= 0; ++j)  {
         for (int i = -radius; i <= 0; ++i)  {
             c = texture(TEXTURE, uv + vec2(float(i),float(j)) * src_size).rgb;
             m0 += c;
             s0 += c * c;
         }
     }

     for (int j = -radius; j <= 0; ++j)  {
         for (int i = 0; i <= radius; ++i)  {
             c = texture(TEXTURE, uv + vec2(float(i),float(j)) * src_size).rgb;
             m1 += c;
             s1 += c * c;
         }
     }

     for (int j = 0; j <= radius; ++j)  {
         for (int i = 0; i <= radius; ++i)  {
             c = texture(TEXTURE, uv + vec2(float(i),float(j)) * src_size).rgb;
             m2 += c;
             s2 += c * c;
         }
     }

     for (int j = 0; j <= radius; ++j)  {
         for (int i = -radius; i <= 0; ++i)  {
             c = texture(TEXTURE, uv + vec2(float(i),float(j)) * src_size).rgb;
             m3 += c;
             s3 += c * c;
         }
     }


     float min_sigma2 = 1e+2;
     m0 /= n;
     s0 = abs(s0 / n - m0 * m0);

     float sigma2 = s0.r + s0.g + s0.b;
     if (sigma2 < min_sigma2) {
         min_sigma2 = sigma2;
         COLOR = vec4(m0, 1.0);
     }

     m1 /= n;
     s1 = abs(s1 / n - m1 * m1);

     sigma2 = s1.r + s1.g + s1.b;
     if (sigma2 < min_sigma2) {
         min_sigma2 = sigma2;
         COLOR = vec4(m1, 1.0);
     }

     m2 /= n;
     s2 = abs(s2 / n - m2 * m2);

     sigma2 = s2.r + s2.g + s2.b;
     if (sigma2 < min_sigma2) {
         min_sigma2 = sigma2;
         COLOR = vec4(m2, 1.0);
     }

     m3 /= n;
     s3 = abs(s3 / n - m3 * m3);

     sigma2 = s3.r + s3.g + s3.b;
     if (sigma2 < min_sigma2) {
         min_sigma2 = sigma2;
         COLOR = vec4(m3, 1.0);
     }
 }"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/radius = 5
shader_param/offset = Vector3( 0, 0, 0 )

[sub_resource type="ViewportTexture" id=15]
viewport_path = NodePath("ViewportContainer/Viewport")

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform vec4 u_bgColor: hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float u_bgColorFactor: hint_range(0.0, 1.0) = 0.4;
uniform vec4 u_patternColor: hint_color = vec4(0.0, 0.0, 0.0, 1.0);

uniform float u_threshold1: hint_range(0.0, 1.0) = 0.75;
uniform float u_threshold2: hint_range(0.0, 1.0) = 0.50;
uniform float u_threshold3: hint_range(0.0, 1.0) = 0.25;
uniform float u_threshold4: hint_range(0.0, 1.0) = 0.05;

uniform vec2 u_bgTiling = vec2(1.0, 1.0);
uniform vec2 u_patternTiling = vec2(1.0, 1.0);

uniform sampler2D u_bgTexture;
uniform sampler2D u_patternTexture;

const float C2_SQRT2 = 0.707106781;
const mat2 ROT_45 = mat2(vec2(C2_SQRT2, -C2_SQRT2), vec2(C2_SQRT2, C2_SQRT2));
const vec4 COLOR_WHITE = vec4(1.0, 1.0, 1.0, 1.0);

float getIntensity(vec3 color)
{
	return 0.299*color.r + 0.587*color.g + 0.114*color.b;
}

vec4 getPatternColor(vec2 uv, float intensity)
{
	vec2 patternUV1 = vec2(-uv.x, uv.y) * u_patternTiling;
	vec2 patternUV2 = uv * u_patternTiling;
	vec2 patternUV3 = ROT_45*(uv + vec2(0.2358, 0.9123)) * u_patternTiling;
	vec2 patternUV4 = (vec2(uv.x, -uv.y) + vec2(0.4123, 0.7218)) * u_patternTiling;
	vec4 pCol1 = texture(u_patternTexture, patternUV1);
	vec4 pCol2 = texture(u_patternTexture, patternUV2);
	vec4 pCol3 = texture(u_patternTexture, patternUV3);
	vec4 pCol4 = texture(u_patternTexture, patternUV4);
	
	if(intensity > u_threshold1)
		return vec4(1.0, 1.0, 1.0, 1.0);
	if(intensity > u_threshold2)
		return mix(pCol1, COLOR_WHITE, 0.5);
	if(intensity > u_threshold3)
		return mix(pCol1*pCol2, COLOR_WHITE, 0.3);
	if(intensity > u_threshold4)
		return mix(pCol1*pCol2*pCol3, COLOR_WHITE, 0.1);
	return pCol1*pCol2*pCol3*pCol4*0.8;
}

void fragment()
{
	vec4 origColor = texture(SCREEN_TEXTURE, SCREEN_UV);
	float intensity = getIntensity(origColor.rgb);
	vec4 bgColor = mix(texture(u_bgTexture, UV*u_bgTiling), u_bgColor, u_bgColorFactor);
	vec4 patternColor = getPatternColor(UV, intensity);
	vec4 color = mix(u_patternColor, bgColor, getIntensity(patternColor.rgb));
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/u_bgColor = Color( 0.847059, 0.635294, 0.180392, 1 )
shader_param/u_bgColorFactor = 0.174
shader_param/u_patternColor = Color( 0.164706, 0.0941176, 0.0117647, 1 )
shader_param/u_threshold1 = 0.75
shader_param/u_threshold2 = 0.5
shader_param/u_threshold3 = 0.215
shader_param/u_threshold4 = 0.165
shader_param/u_bgTiling = Vector2( 1, 1 )
shader_param/u_patternTiling = Vector2( 1, 1 )
shader_param/u_patternTexture = ExtResource( 11 )

[sub_resource type="ViewportTexture" id=12]
viewport_path = NodePath("ViewportContainer/Viewport")

[node name="MainScreen" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 10 )

[node name="GUI" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Interface" type="CanvasLayer" parent="GUI"]
script = ExtResource( 5 )

[node name="CurrentTarget" parent="GUI/Interface" instance=ExtResource( 6 )]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 0.0
margin_bottom = 0.0

[node name="CinematicEffect" parent="GUI/Interface" instance=ExtResource( 1 )]

[node name="Inventory" parent="GUI/Interface" instance=ExtResource( 4 )]
visible = false
margin_left = 1230.0
margin_top = 724.0
margin_right = -5.0
margin_bottom = 6.0

[node name="CharacterInspect" parent="GUI/Interface" instance=ExtResource( 9 )]
visible = false
margin_left = 10.0
margin_top = -3.0
margin_right = -1375.0
margin_bottom = -3.0

[node name="ErrorMessages" parent="GUI/Interface" instance=ExtResource( 12 )]
margin_right = -1870.0
margin_bottom = -1039.0

[node name="ViewportContainer" type="ViewportContainer" parent="."]
margin_right = 3840.0
margin_bottom = 2160.0
mouse_filter = 1
stretch = true

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 3840, 2160 )
transparent_bg = true
handle_input_locally = false
usage = 0
render_target_v_flip = true
render_target_update_mode = 3
audio_listener_enable_2d = true

[node name="DayNightCycle" parent="ViewportContainer/Viewport" instance=ExtResource( 16 )]
color_night = Color( 0.180392, 0.0745098, 0.341176, 1 )
color_dawn = Color( 0.709804, 0.403922, 0.403922, 1 )
color_day = Color( 0.588235, 0.537255, 0.486275, 1 )
color_dusk = Color( 0.384314, 0.254902, 0.298039, 1 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="ViewportContainer/Viewport"]
environment = ExtResource( 8 )

[node name="BackgroundMusic" parent="ViewportContainer/Viewport" instance=ExtResource( 17 )]

[node name="BaseWorldScene" parent="ViewportContainer/Viewport" instance=ExtResource( 7 )]

[node name="Effects" type="Control" parent="."]
margin_right = 1920.0
margin_bottom = 1080.0

[node name="FPS" parent="Effects" instance=ExtResource( 15 )]
anchor_left = 0.031
anchor_top = 0.038
anchor_right = 0.031
anchor_bottom = 0.038
margin_left = 629.48
margin_top = 236.96
margin_right = 747.48
margin_bottom = 299.96
rect_scale = Vector2( 1, 1 )
text = "FPS: "

[node name="Time" parent="Effects" instance=ExtResource( 15 )]
anchor_left = 0.031
anchor_top = 0.038
anchor_right = 0.031
anchor_bottom = 0.038
margin_left = 1874.48
margin_top = 236.96
margin_right = 1992.48
margin_bottom = 299.96
rect_scale = Vector2( 1, 1 )
text = "Time"

[node name="WeatherEffects" parent="Effects" instance=ExtResource( 13 )]
visible = false

[node name="PostFX" parent="Effects" instance=ExtResource( 14 )]
material = SubResource( 19 )

[node name="MaxZoomClouds" parent="Effects" instance=ExtResource( 3 )]
visible = true

[node name="ScreenTransition" parent="Effects" instance=ExtResource( 2 )]
margin_right = 3840.0
margin_bottom = 2160.0

[node name="Mosaic" type="Sprite" parent="Effects"]
visible = false
material = SubResource( 11 )
texture = SubResource( 15 )
centered = false
flip_v = true

[node name="Parchment" type="Sprite" parent="Effects"]
visible = false
material = SubResource( 14 )
texture = SubResource( 12 )
centered = false
flip_v = true
