[gd_scene load_steps=13 format=2]

[ext_resource path="res://camera/PlayerCameraNode.gd" type="Script" id=1]
[ext_resource path="res://scenes/IslandScene.tscn" type="PackedScene" id=2]
[ext_resource path="res://camera/CameraController.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/shaders/Straw_Sway.shader" type="Shader" id=5]
[ext_resource path="res://target/CurrentTargetPortrait.tscn" type="PackedScene" id=6]
[ext_resource path="res://WorldEnvDefault.tres" type="Environment" id=8]

[sub_resource type="ShaderMaterial" id=5]
resource_local_to_scene = true
shader = ExtResource( 5 )
shader_param/speed = 1.0
shader_param/minStrength = 0.06
shader_param/maxStrength = 0.1
shader_param/strengthScale = 10.0
shader_param/interval = 0.8
shader_param/detail = 1.0
shader_param/distortion = 0.438
shader_param/heightOffset = 0.147
shader_param/offset = 2.0

[sub_resource type="AnimationNodeStateMachinePlayback" id=2]

[sub_resource type="Shader" id=1]
code = "// original wind shader from https://github.com/Maujoe/godot-simple-wind-shader-2d/tree/master/assets/maujoe.simple_wind_shader_2d
// original script modified by HungryProton so that the assets are moving differently : https://pastebin.com/VL3AfV8D
//
// speed - The speed of the wind movement.
// minStrength - The minimal strength of the wind movement.
// maxStrength - The maximal strength of the wind movement.
// strengthScale - Scalefactor for the wind strength.
// interval - The time between minimal and maximal strength changes.
// detail - The detail (number of waves) of the wind movement.
// distortion - The strength of geometry distortion.
// heightOffset - The height where the wind begins to move. By default 0.0.

shader_type canvas_item;
render_mode blend_mix;

// Wind settings.
uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0) = 0.05;
uniform float maxStrength : hint_range(0.0, 1.0) = 0.01;
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset : hint_range(0.0, 1.0);

// With the offset value, you can if you want different moves for each asset. Just put a random value (1, 2, 3) in the editor. Don't forget to mark the material as unique if you use this
uniform float offset = 2; 

float getWind(vec2 vertex, vec2 uv, float time){
    float diff = pow(maxStrength - minStrength, 2.0);
    float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
    float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
    
    return wind; 
}

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}


void vertex() {
    vec4 pos = WORLD_MATRIX * vec4(0.0, 0.0, 0.0, 1.0);
    float time = TIME * speed + random(UV) * 500.0;
    //float time = TIME * speed + pos.x * pos.y  ; not working when moving...
    VERTEX.x += getWind(VERTEX.xy, UV, time);
}"

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/speed = 1.0
shader_param/minStrength = 0.05
shader_param/maxStrength = 0.01
shader_param/strengthScale = 100.0
shader_param/interval = 3.5
shader_param/detail = 0.5
shader_param/distortion = 0.107
shader_param/heightOffset = 0.558
shader_param/offset = 2.0

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

// MODES
// 0 - DEBUG
// 1 - MULTIPLY
// 2 - SCREEN
// 3 - SOFTLIGHT
// 4 - HARDLIGHT
// 5 - OVERLAY
uniform int mode :hint_range(0,5) = 5;
uniform bool linearColorSpace = false;
uniform vec4 color1 :hint_color = vec4(1, 0.5, 0.8, 1);
uniform vec4 color2 :hint_color = vec4(0.4, 0.8, 1, 1);
uniform vec2 direction = vec2(1.0, 1.0);
uniform float opacity :hint_range(0, 1) = 0.5;

 vec3 srgb_to_linear(vec3 c){
	return c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);
}

vec3 linear_to_srgb(vec3 c){
	return max(1.055 * pow(c, vec3(0.416666667)) - 0.055, 0.0);
}

void fragment(){
	vec2 uv = FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy;
	vec4 src = texture(SCREEN_TEXTURE, uv);
	
	vec3 c_a = src.rgb;
	vec3 grad1 = color1.rgb;
	vec3 grad2 = color2.rgb;
	vec3 c_f;
	
	if (linearColorSpace){ 
		c_a = linear_to_srgb(c_a);
		grad1 = linear_to_srgb(grad1);
		grad2 = linear_to_srgb(grad2);
	}

	float param = dot(uv - 0.5, direction);
	vec3 c_b = mix(grad1, grad2, param + 0.5);
	
	if (mode == 0){       // DEBUG
		c_f = c_b;
	}else if (mode == 1){ // MULTIPLY
		c_f = c_a * c_b;
	}else if (mode == 2){ // SCREEN
		c_f = 1.0 - (1.0 - c_a) * (1.0 - c_b);
	}else if (mode == 3){ // SOFTLIGHT
		vec3 c_u = c_a * c_b * 2.0 + (1.0 - c_b * 2.0) * c_a * c_a;
		vec3 c_d = (1.0 - c_b) * c_a * 2.0 + (c_b * 2.0 - 1.0) * sqrt(c_a);
		c_f = mix(c_u, c_d, c_b + 0.5);
	}else if (mode == 4){ // HARDLIGHT
		vec3 c_u = c_a * c_b * 2.0;
		vec3 c_d = 1.0 - (1.0 - c_a) * (1.0 - c_b) * 2.0;
		c_f = mix(c_u, c_d, c_b + 0.5);
	}else if (mode == 5){ // OVERLAY
		vec3 c_u = c_a * c_b * 2.0;
		vec3 c_d = 1.0 - (1.0 - c_a) * (1.0 - c_b) * 2.0;
		c_f = mix (c_u, c_d, c_a + 0.5);
	}
	
	if (linearColorSpace){
		c_f = srgb_to_linear(c_f);
	}

	COLOR = vec4(c_f, opacity);
    }"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/mode = 5
shader_param/linearColorSpace = false
shader_param/color1 = Color( 0.0980392, 0.172549, 0.203922, 1 )
shader_param/color2 = Color( 0.823529, 0.447059, 0.772549, 1 )
shader_param/direction = Vector2( 0.1, 0.7 )
shader_param/opacity = 0.409

[node name="MainScreen" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="ViewportContainer" type="ViewportContainer" parent="."]

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 1024, 600 )
transparent_bg = true
handle_input_locally = false
render_target_update_mode = 3

[node name="WorldEnvironment" type="WorldEnvironment" parent="ViewportContainer/Viewport"]
environment = ExtResource( 8 )

[node name="CanvasModulate" type="CanvasModulate" parent="ViewportContainer/Viewport"]
color = Color( 0.705882, 0.705882, 0.541176, 1 )

[node name="IslandScene" parent="ViewportContainer/Viewport" instance=ExtResource( 2 )]

[node name="Straw" parent="ViewportContainer/Viewport/IslandScene" index="0"]
material = SubResource( 5 )

[node name="AnimationTree" parent="ViewportContainer/Viewport/IslandScene/YSort/Player" index="14"]
parameters/playback = SubResource( 2 )

[node name="PlayerFollowNode" parent="ViewportContainer/Viewport/IslandScene/YSort/Player" index="18"]
script = ExtResource( 1 )

[node name="TallGrass" parent="ViewportContainer/Viewport/IslandScene/YSort" index="6"]
material = SubResource( 4 )

[node name="Straw2" parent="ViewportContainer/Viewport/IslandScene/YSort" index="7"]
material = SubResource( 5 )

[node name="CameraController" parent="ViewportContainer/Viewport" instance=ExtResource( 4 )]

[node name="GUI" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="CanvasLayer" type="CanvasLayer" parent="GUI"]

[node name="CurrentTarget" parent="GUI/CanvasLayer" instance=ExtResource( 6 )]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 0.0
margin_bottom = 0.0

[node name="Control" type="Control" parent="."]
margin_right = 1024.0
margin_bottom = 600.0

[node name="Ambience" type="ColorRect" parent="Control"]
material = SubResource( 7 )
margin_right = 1024.0
margin_bottom = 600.0

[connection signal="moving_end" from="ViewportContainer/Viewport/IslandScene/YSort/Player" to="ViewportContainer/Viewport/IslandScene/YSort/Player/PlayerFollowNode" method="_on_Player_moving_end"]
[connection signal="moving_started" from="ViewportContainer/Viewport/IslandScene/YSort/Player" to="ViewportContainer/Viewport/IslandScene/YSort/Player/PlayerFollowNode" method="_on_Player_moving_started"]

[editable path="ViewportContainer/Viewport/IslandScene"]
[editable path="ViewportContainer/Viewport/IslandScene/Sand"]
[editable path="ViewportContainer/Viewport/IslandScene/Water"]
[editable path="ViewportContainer/Viewport/IslandScene/Grass"]
[editable path="ViewportContainer/Viewport/IslandScene/YSort/Player"]
