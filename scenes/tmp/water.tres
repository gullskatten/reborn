[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform vec4 water_color : hint_color; 
uniform vec4 shadow_color : hint_color;
uniform sampler2D uv_offset_texture : hint_black;
uniform sampler2D uv_texture_crossing : hint_black;
uniform vec2 uv_offset_scale = vec2(0.2, 0.2);

uniform float sine_time_scale = 0.03;
uniform vec2 sine_offset_scale = vec2(0.4, 0.4);

uniform float texture_offset_time_scale = 0.05;
uniform vec2 texture_offset_scale = vec2(0.2, 0.2);

uniform float tile_factor = 1.0;
uniform float aspect_ratio = 1.0;
uniform float PulseRate = 0.7;
uniform float PulseIntensity = 0.1;
uniform float Opacity : hint_range(0,1) = 1.0;

void vertex() {
		// Pulsating angular frequency: time * rate * 2pi
	float pulse_freq = TIME*PulseRate*3.14;
	// Pulsating amplitude: sine wave shifted and scaled to range 0.0 - 1.0
	float pulse_val = 0.2*(sin(pulse_freq)+1.1);
	// Sine^4 causes the wave to have strong fast peaks with larger intervals
	pulse_val = pow(pulse_val, 4);
	// Move the vertices along their own normals,
	// Using the generated wave and PulseIntensity
	if (VERTEX.x > 0.0 && VERTEX.y < 0.0 || VERTEX.x < 0.0 && VERTEX.y >= 0.0) {
		VERTEX += VERTEX*(pulse_val*PulseIntensity);
	} else {
		VERTEX -= VERTEX*(pulse_val*PulseIntensity);
	}
}

vec2 calculate_sine_wave(float time, float multiplier, vec2 uv, vec2 offset_scale) {
	float time_multiplied = time * multiplier;
	float unique_offset = uv.x + uv.y;
	return vec2(
		sin(time_multiplied + unique_offset * offset_scale.x),
		sin(time_multiplied + unique_offset * offset_scale.y)
	);
}

void fragment() {
	
	vec2 base_uv_offset = -UV * texture_offset_scale;
	vec2 base_uv_offset2 = UV * texture_offset_scale + TIME * texture_offset_time_scale;
	vec2 adjusted_uv = -UV * tile_factor;
	vec2 adjusted_uv2 = UV;
	base_uv_offset += TIME * texture_offset_time_scale;
	adjusted_uv.y *= aspect_ratio;
	adjusted_uv2.y *= aspect_ratio;
	
	vec2 texture_based_offset = texture(uv_offset_texture, base_uv_offset).rg * 2.0 - 1.0;
	vec2 texture_based_offset2 = texture(uv_texture_crossing, base_uv_offset2).rg * 2.0 - 2.0;
	
	vec2 sine_offset = calculate_sine_wave(TIME, sine_time_scale, adjusted_uv, sine_offset_scale);
	vec2 sine_offset2 = calculate_sine_wave(TIME, sine_time_scale, adjusted_uv2, sine_offset_scale);
	
	// BEGIN - Surface refraction (display things under water)
	vec2 tiled_uvs = UV * 100.0;
    vec2 displacement = vec2(
             cos(TIME * 8.0 + tiled_uvs.x + tiled_uvs.y) * 0.002,
            cos(TIME * 0.1 + tiled_uvs.x + tiled_uvs.y) * 0.002
    );
    
    vec4 refraction = texture(SCREEN_TEXTURE, SCREEN_UV + displacement);
	// END - Surface refraction
	float water_height = (sine_offset.y + texture_based_offset.y) * 0.75;
	float water_height2 = (sine_offset2.y + texture_based_offset2.y) * 2.7;
	// ADD - water color + things under water -> 0.8 is the opacity (blend)
	vec4 water = mix(refraction, water_color, 0.8);
	COLOR = mix(water, shadow_color, water_height2 * 0.4 + water_height * 0.8);
	NORMALMAP = texture(NORMAL_TEXTURE, adjusted_uv / 5.0).rgb;
	COLOR.a = sin(clamp(water_height * 0.5 * texture(TEXTURE, UV).a, 2.4, 3.0));
	
}"
