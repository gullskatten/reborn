[gd_scene load_steps=6 format=2]

[ext_resource path="res://scenes/noise_water.tres" type="Texture" id=1]
[ext_resource path="res://assets/textures/water_uv_offset.png" type="Texture" id=2]
[ext_resource path="res://assets/textures/water_normal.png" type="Texture" id=3]

[sub_resource type="Shader" id=50]
code = "shader_type canvas_item;

uniform vec4 water_color : hint_color; 
uniform vec4 shadow_color : hint_color;
uniform sampler2D uv_offset_texture : hint_black;
uniform sampler2D uv_texture_crossing : hint_black;
uniform vec2 uv_offset_scale = vec2(0.2, 0.2);

uniform float sine_time_scale = 0.03;
uniform vec2 sine_offset_scale = vec2(0.4, 0.4);

uniform float texture_offset_time_scale = 0.05;
uniform vec2 texture_offset_scale = vec2(0.2, 0.2);

uniform float tile_factor = 1.0;
uniform float aspect_ratio = 1.0;
uniform float PulseRate = 0.7;
uniform float PulseIntensity = 0.1;
uniform float Opacity : hint_range(0,1) = 1.0;

void vertex() {
		// Pulsating angular frequency: time * rate * 2pi
	float pulse_freq = TIME*PulseRate*3.14;
	// Pulsating amplitude: sine wave shifted and scaled to range 0.0 - 1.0
	float pulse_val = 0.2*(sin(pulse_freq)+1.1);
	// Sine^4 causes the wave to have strong fast peaks with larger intervals
	pulse_val = pow(pulse_val, 4);
	// Move the vertices along their own normals,
	// Using the generated wave and PulseIntensity
	if (VERTEX.x > 0.0 && VERTEX.y < 0.0 || VERTEX.x < 0.0 && VERTEX.y >= 0.0) {
		VERTEX += VERTEX*(pulse_val*PulseIntensity);
	} else {
		VERTEX -= VERTEX*(pulse_val*PulseIntensity);
	}
}

vec2 calculate_sine_wave(float time, float multiplier, vec2 uv, vec2 offset_scale) {
	float time_multiplied = time * multiplier;
	float unique_offset = uv.x + uv.y;
	return vec2(
		sin(time_multiplied + unique_offset * offset_scale.x),
		sin(time_multiplied + unique_offset * offset_scale.y)
	);
}

void fragment() {
	
	vec2 base_uv_offset = -UV * texture_offset_scale;
	vec2 base_uv_offset2 = UV * texture_offset_scale + TIME * texture_offset_time_scale;
	vec2 adjusted_uv = -UV * tile_factor;
	vec2 adjusted_uv2 = UV;
	base_uv_offset += TIME * texture_offset_time_scale;
	adjusted_uv.y *= aspect_ratio;
	adjusted_uv2.y *= aspect_ratio;
	
	vec2 texture_based_offset = texture(uv_offset_texture, base_uv_offset).rg * 2.0 - 1.0;
	vec2 texture_based_offset2 = texture(uv_texture_crossing, base_uv_offset2).rg * 2.0 - 2.0;
	
	vec2 sine_offset = calculate_sine_wave(TIME, sine_time_scale, adjusted_uv, sine_offset_scale);
	vec2 sine_offset2 = calculate_sine_wave(TIME, sine_time_scale, adjusted_uv2, sine_offset_scale);
	
	// BEGIN - Surface refraction (display things under water)
	vec2 tiled_uvs = UV * 100.0;
    vec2 displacement = vec2(
             cos(TIME * 8.0 + tiled_uvs.x + tiled_uvs.y) * 0.002,
            cos(TIME * 0.1 + tiled_uvs.x + tiled_uvs.y) * 0.002
    );
    
    vec4 refraction = texture(SCREEN_TEXTURE, SCREEN_UV + displacement);
	// END - Surface refraction
	float water_height = (sine_offset.y + texture_based_offset.y) * 0.75;
	float water_height2 = (sine_offset2.y + texture_based_offset2.y) * 2.7;
	// ADD - water color + things under water -> 0.8 is the opacity (blend)
	vec4 water = mix(refraction, water_color, 0.8);
	COLOR = mix(water, shadow_color, water_height2 * 0.4 + water_height * 0.8);
	NORMALMAP = texture(NORMAL_TEXTURE, adjusted_uv / 5.0).rgb;
	COLOR.a = sin(clamp(water_height * 0.5 * texture(TEXTURE, UV).a, 2.4, 3.0));
	
}"

[sub_resource type="ShaderMaterial" id=66]
shader = SubResource( 50 )
shader_param/water_color = Color( 0.529412, 0.92549, 1, 1 )
shader_param/shadow_color = Color( 0.74902, 0.964706, 0.988235, 1 )
shader_param/uv_offset_scale = Vector2( 0.2, 0.2 )
shader_param/sine_time_scale = 0.01
shader_param/sine_offset_scale = Vector2( 0.5, -0.5 )
shader_param/texture_offset_time_scale = 0.015
shader_param/texture_offset_scale = Vector2( 0.2, 1 )
shader_param/tile_factor = 1.0
shader_param/aspect_ratio = 1.0
shader_param/PulseRate = 0.7
shader_param/PulseIntensity = 0.1
shader_param/Opacity = 1.0
shader_param/uv_offset_texture = ExtResource( 2 )
shader_param/uv_texture_crossing = ExtResource( 1 )

[node name="Water" type="Polygon2D"]
material = SubResource( 66 )
position = Vector2( 2134, 1947 )
texture = ExtResource( 3 )
polygon = PoolVector2Array( -510, -599, -448, -605, -411, -596, -343, -559, -210, -506, -126, -404, -117, -353, -94, -277, -109, -203, -140, -121, -127, -43, -117, 43, -119, 134, -141, 200, -167, 246, -213, 286, -263, 318, -290, 334, -370, 361, -424, 385, -482, 414, -497, 436, -503, 462, -493, 487, -477, 503, -275, 628, -46, 732, 277, 914, 422, 1085, 556, 1358, 583, 1533, 570, 1762, 472, 1916, 257, 2135, -9, 2236, -493, 2303, -820, 2313, -1274, 2243, -1412, 2219, -1758, 2074, -1866, 1923, -1906, 1751, -1862, 1617, -1830, 1580, -1823, 1525, -1819, 1479, -1817, 1440, -1813, 1404, -1821, 1338, -1858, 1318, -1887, 1302, -1921, 1292, -1968, 1259, -1995, 1228, -2028, 1199, -2043, 1177, -2063, 1154, -2067, 1119, -2068, 1100, -2068, 1081, -2064, 1061, -2058, 1048, -2053, 1036, -2042, 1026, -2032, 1009, -2031, 993, -2035, 970, -2042, 942, -2044, 935, -2045, 928, -2050, 919, -2053, 911, -2058, 900, -2062, 892, -2074, 871, -2000, 888, -1946, 905, -1872, 939, -1812, 977, -1755, 996, -1641, 1020, -1463, 1030, -1443, 998, -1423, 998, -1404, 997, -1388, 997, -1379, 992, -1361, 989, -1345, 980, -1343, 985, -1340, 990, -1333, 1002, -1326, 1017, -1319, 1026, -1307, 1035, -1284, 1042, -1259, 1043, -1229, 1042, -1211, 1042, -1193, 1046, -1181, 1049, -1166, 1055, -1156, 1060, -1144, 1065, -1131, 1068, -1120, 1068, -1110, 1067, -1059, 1050, -1004, 1023, -983, 1010, -974, 1004, -964, 999, -904, 957, -878, 943, -804, 912, -785, 901, -735, 879, -712, 861, -696, 847, -688, 830, -683, 820, -681, 804, -683, 793, -687, 776, -688, 765, -694, 755, -699, 748, -712, 744, -727, 740, -741, 736, -751, 733, -757, 730, -775, 717, -785, 709, -798, 703, -807, 699, -820, 700, -842, 701, -860, 700, -882, 698, -898, 693, -907, 685, -919, 672, -939, 664, -959, 658, -971, 651, -976, 641, -981, 632, -984, 620, -989, 615, -997, 611, -1009, 607, -1016, 600, -1029, 580, -1031, 571, -1032, 563, -1030, 557, -1026, 552, -1019, 549, -1002, 541, -987, 533, -979, 526, -974, 518, -969, 504, -968, 487, -965, 472, -962, 459, -963, 444, -971, 436, -979, 432, -991, 430, -999, 431, -1017, 435, -1031, 436, -1051, 436, -1068, 433, -1088, 429, -1106, 427, -1123, 425, -1135, 426, -1148, 429, -1162.97, 433.861, -1521, 438, -1541, 439, -1552, 441, -1577, 445, -1593, 447, -1633, 452, -1669, 459, -1695, 464, -1706, 466, -1733, 476, -1749, 483, -1766, 491, -1776, 496, -1785, 502, -1787, 509, -1785, 514, -1765, 525, -1753, 533, -1746, 536, -1740, 537, -1710, 536, -1677, 538, -1647, 536, -1625, 533, -1616, 535, -1607, 539, -1594, 545, -1573, 553, -1510, 551, -1413, 553, -1395, 552, -1386, 554, -1370, 560, -1351, 570, -1321, 580, -1288, 584, -1211, 580, -1180, 591, -1166, 598, -1161, 602, -1158, 606, -1156, 611, -1157, 618, -1163, 628, -1203, 650, -1254, 675, -1316, 710, -1359, 727, -1375, 758, -1400, 794, -1378, 844, -1377, 885, -1370, 924, -1342, 943, -1339, 948, -1339, 956, -1338, 965, -1339, 971, -1343, 976, -1345, 980, -1361, 989, -1379, 992, -1388, 997, -1404, 997, -1423, 998, -1443, 998, -1463, 1030, -1641, 1020, -1755, 996, -1812, 977, -1872, 939, -1946, 905, -2000, 888, -2074, 871, -2144, 854, -2276, 848, -2350, 843, -2404, 829, -2435, 811, -2480, 790, -2554, 746, -2584, 716, -2608, 676, -2629, 646, -2649, 609, -2662, 541, -2682, 457, -2635, 299, -2607, 224, -2639, 31, -2639, -11, -2633, -32, -2619, -65, -2552, -147, -2530, -204, -2516, -247, -2511, -288, -2486, -361, -2471, -405, -2454, -440, -2437, -460, -2399, -479, -2304, -520, -2241, -552, -2206, -567, -2150, -580, -2098, -578, -2051, -574, -2008, -560, -1976, -536, -1896, -496, -1870, -487, -1849, -476, -1832, -460, -1796, -432, -1765, -422, -1716, -415, -1688, -416, -1667, -402, -1585, -345, -1562, -336, -1448, -304, -1407, -300, -1384, -288, -1304, -288, -1256, -304, -1136, -304, -1064, -328, -1000, -336, -960, -352, -960, -384, -920, -400, -808, -400, -719, -456, -695, -472, -672, -496, -654, -531, -623, -557, -584, -582 )

[node name="DeepWater" type="StaticBody2D" parent="."]

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="DeepWater"]
visible = false
polygon = PoolVector2Array( -2098, -612, -2171, -624, -2226, -606, -2346, -533, -2415, -467, -2424, -391, -2418, -342, -2413, -280, -2415, -199, -2390, -142, -2317, -77, -2290, -16, -2260, 31, -2230, 51, -2208, 93, -2206, 142, -2215, 182, -2216, 223, -2262, 276, -2312, 302, -2312, 337, -2245, 366, -2139, 386, -1983, 408, -1894, 421, -1809, 422, -1764, 436, -1712, 443, -1662, 466, -1621, 485, -1527, 482, -1295, 480, -1129, 460, -1016, 453, -814, 441, -730, 451, -635, 443, -529, 406, -300, 315, -191, 221, -152, 118, -147, 13, -164, -117, -147, -186, -125, -317, -187, -448, -233, -500, -344, -537, -445, -581, -530, -576, -594, -547, -665, -468, -801, -388, -900, -379, -944, -340, -1087, -303, -1237, -287, -1280, -272, -1354, -275, -1418, -280, -1495, -302, -1631, -351, -1682, -393, -1801, -414, -1870, -463, -1943, -498, -1987, -533 )
