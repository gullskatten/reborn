[gd_scene load_steps=14 format=2]

[ext_resource path="res://assets/props/chest/chest_1.png" type="Texture" id=1]
[ext_resource path="res://ui/action_dialog/ButtonPressHint.tscn" type="PackedScene" id=2]
[ext_resource path="res://Treasure.gd" type="Script" id=3]
[ext_resource path="res://GodRay.tscn" type="PackedScene" id=4]

[sub_resource type="Gradient" id=1]
offsets = PoolRealArray( 0, 0.485075 )
colors = PoolColorArray( 0.870588, 0.619608, 0.254902, 1, 0.909804, 0.756863, 0.439216, 0 )

[sub_resource type="GradientTexture" id=2]
gradient = SubResource( 1 )

[sub_resource type="ParticlesMaterial" id=3]
lifetime_randomness = 0.02
emission_shape = 2
emission_box_extents = Vector3( 6, 3, 1 )
flag_disable_z = true
direction = Vector3( 0, -1, 0 )
spread = 26.59
gravity = Vector3( 0, 0, 0 )
initial_velocity = 10.0
initial_velocity_random = 0.42
angular_velocity = 32.73
orbit_velocity = 0.0
orbit_velocity_random = 0.0
radial_accel = -31.81
radial_accel_random = 0.72
color = Color( 1, 0.972549, 0.647059, 1 )
color_ramp = SubResource( 2 )

[sub_resource type="CircleShape2D" id=4]
radius = 32.0624

[sub_resource type="CapsuleShape2D" id=5]
radius = 6.76732
height = 8.82405

[sub_resource type="Shader" id=55]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;
uniform sampler2D gradient : hint_black;
uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}


vec4 soft_light(vec4 base, vec4 blend){
	vec4 limit = step(0.5, blend);
	return mix(2.0 * base * blend + base * base * (1.0 - 2.0 * blend), sqrt(base) * (2.0 * blend - 1.0) + (2.0 * base) * (1.0 - blend), limit);
}

void fragment()
{
	float gradient_alpha = texture(gradient, vec2(UV.y, UV.x)).r;
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0 , falloff, (1.0 - UV.y)); // Top
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a * gradient_alpha);
}
"

[sub_resource type="Gradient" id=54]
offsets = PoolRealArray( 0, 0.273292 )

[sub_resource type="GradientTexture" id=56]
gradient = SubResource( 54 )

[sub_resource type="ShaderMaterial" id=57]
resource_local_to_scene = true
shader = SubResource( 55 )
shader_param/angle = 0.4
shader_param/position = 0.3
shader_param/spread = 0.312
shader_param/cutoff = 0.27
shader_param/falloff = 0.746
shader_param/edge_fade = 0.125
shader_param/speed = 2.0
shader_param/ray1_density = 8.0
shader_param/ray2_density = 30.0
shader_param/ray2_intensity = 0.408
shader_param/color = Color( 1, 0.9, 0.65, 0.8 )
shader_param/hdr = true
shader_param/seed = 5.0
shader_param/gradient = SubResource( 56 )

[node name="TreasureNode" type="Node2D"]
script = ExtResource( 3 )

[node name="Treasure" type="Sprite" parent="."]
position = Vector2( 1, -1 )
texture = ExtResource( 1 )

[node name="Particles2D" type="Particles2D" parent="."]
amount = 20
lifetime = 2.3
randomness = 0.16
process_material = SubResource( 3 )

[node name="PlayerHintArea" type="Area2D" parent="."]
collision_layer = 2
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerHintArea"]
shape = SubResource( 4 )

[node name="ButtonPressHint" parent="." instance=ExtResource( 2 )]
visible = false
margin_left = -14.0
margin_top = -28.0
margin_right = -14.0
margin_bottom = -28.0

[node name="StaticBody2D" type="StaticBody2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
position = Vector2( -2, 2 )
rotation = -1.1205
shape = SubResource( 5 )

[node name="Tween" type="Tween" parent="."]

[node name="LightSmallScarce" parent="." instance=ExtResource( 4 )]
material = SubResource( 57 )
position = Vector2( 23, -76 )
rotation = 3.14159
scale = Vector2( 0.9, 0.712 )

[connection signal="body_entered" from="PlayerHintArea" to="." method="_on_PlayerHintArea_body_entered"]
[connection signal="body_exited" from="PlayerHintArea" to="." method="_on_PlayerHintArea_body_exited"]
